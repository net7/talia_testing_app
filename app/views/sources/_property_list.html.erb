<% attribute_blacklist = ['id', 'type', 'uri'] %>
<% predicate_blacklist = [N::TALIA.isFileOf, N::TALIA.hasFile] %>
<div class ="properties_list">
  <table id="properties_table" class="tablesorter">
    <thead> 
      <tr> 
        <th>Property</th> 
        <th>Value</th>  
      </tr> 
    </thead>
    <tbody>
      <% for attribute, value in @source.attributes %>
        <% unless value == 'TaliaCore::Source' || value == 'TaliaCore::ActiveSource' || attribute_blacklist.include?(attribute) %>
          <%= render(:partial => 'property_item', :object => attribute, :locals => {:values => [value] }) unless (value == 'TaliaCore::Source' || value == 'TaliaCore::ActiveSource')%>
        <% end %>
      <% end %>
      <% for predicate in @source.direct_predicates %>
        <% unless predicate_blacklist.include?(predicate) %>
          <%= render(:partial => 'property_item', :object => predicate.to_name_s, :locals => {:values => @source[predicate].values_with_lang(I18n.locale.to_s), :uri => predicate.uri})  %>
        <% end %>
      <% end %>
      <% for predicate in @source.inverse_predicates %>
        <% unless predicate_blacklist.include?(predicate) %>
          <%= render(:partial => 'property_item', :object => "#{predicate.to_name_s} (inverse)", :locals => { :values => @source.inverse[predicate] }) %>
        <% end %>
      <% end %>
    </tbody>
  </table>
</div>
